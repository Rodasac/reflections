What happens when you initialize a repository? Why do you need to do it?

	The process begins to manage Git versions, to start with one: git init.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The test area is a virtual space managed by Git where all information is 
	stored in the repository that has not yet been commited.

How can you use the staging area to make sure you have one commit per logical
change?

	Compared to git diff can be analyzed changes and know when you should
	 create a new commits.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	By developing new features not still sure whether they will be in the main branch, secondary branches allow test this code without affecting what came before.

How do the diagrams help you visualize the branch structure?

	With using git log --graph (possibly with --oneline) [branch names...],
	you can easily tell how the whole branch structure was developed and at
	which point each branch was actually created. That would give you the
	overview of the whole structure of the project you are working on,
	so that you can tell what you are specifically focusing on and when 
	and which branch to merge your work.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	All the commits in the second branch is merged into the first branch,
	and the resluting merge commit becomes the new head of your current
	branch. The diagram shown by git log --graph cleary shows the merged
	commit has two parents, which correspond to the prior heads of each
	merged branch.

What are the pros and cons of Git's automatic merging vs. always doing merges manually?

	Pros:
		Saves your time, especially when each non-conflicting merge is trivial.
		Makes you concentrate on the changes which actually contain conflicts.

	Cons:
		Can't thnink of any definite ones. Maybe can make it easier to overlook
		the potentially dangerous situation where two person are working
		on the same file at the same time.
